function [u,result] = solve_reuse(GSD,A,b,ureuse,varargin)
% function u = solve_reuse(GSD,A,b,ureuse,varargin)
% resolution de Au=b sur la base reduite issue de reuse
% A et b : PCMATRIX ou PCRADIALMATRIX
% v : pour la reutilisation (MULTIMATRIX ou PCRADIALMATRIX ou double)

fprintf('\nGSD solveur arnoldi ... \n')
uref = getcharin('reference',varargin);
paramradial.nbfoncmax = getparam(GSD,'nbfoncmax');
paramradial.nbfoncmaxsimul = getparam(GSD,'nbfoncmaxsimul');
paramradial.orthocrit = getparam(GSD,'orthocrit');
paramradial.restart = getparam(GSD,'restart');
paramradial.tol = getparam(GSD,'tol');
paramradial.reuse = getparam(GSD,'reuse');
errorindicator = getparam(GSD,'errorindicator');
update = getparam(GSD,'update');

if ~isempty(uref)
    errorindicator='reference';
end

tolpcg = getparam(GSD,'reuse');
if paramradial.reuse
    qreuse = getcharin('reuse',varargin);
    varargin = delcharin('reuse',varargin);
end
tolpcg = getparam(GSD,'toliter');
directsolve = getparam(GSD,'direct');
affiche = getparam(GSD,'display');

[A,b,PC]=pcsystemupdate(A,b,varargin{:});

P = getP(PC);
n=size(A,1);

errorpf=zeros(1,paramradial.pfixmax);
result.error=zeros(1,paramradial.nbfoncmax);
result.errorres=zeros(1,paramradial.nbfoncmax);
result.errorrayg=zeros(1,paramradial.nbfoncmax);
result.errorraygi=zeros(1,paramradial.nbfoncmax);
result.time = zeros(1,paramradial.nbfoncmax);
result.rayg=cell(1,paramradial.nbfoncmax);
result.Rayg=cell(1,paramradial.nbfoncmax);
result.nfonctions = 0 ;
result.addedfunctions = 0;

l0 = zeros(1,PC);
l = zeros(1,PC);
U = sparse(n,1);
stoU = sparse(n,0);
U0 = sparse(n,1);
radalpha = [];

Am=expect(A);
Am = 1/2*(Am+Am');

clock0 = clock;

if ~strcmp(errorindicator,'rayleigh')
mynorm=@(b) norm(b);
normb = mynorm(b);
end

if paramradial.reuse && nargin>=4 && ~isempty(ureuse)
   if isa(ureuse,'PCRADIALMATRIX')
        if length(ureuse)==0
            paramradial.reuse=0;
        else
            ureuse = getV(ureuse);
        end
    elseif ~isa(ureuse,'MULTIMATRIX')
        if isa(ureuse,'PCMATRIX')
           fprintf('  on ne peut reutiliser une PCMATRIX -> utiliser PCRADIALMATRIX ou MULTIMATRIX\n')
            paramradial.reuse=0;
        end
        if isa(ureuse,'double') & normest(ureuse)<eps
           fprintf('  vecteur de norme negligeable -> pas d''initialisation\n')
            paramradial.reuse=0; 
        end
   end
else
    paramradial.reuse = false;
end

if ~paramradial.reuse    % PAS D'INITIALISATION
   u = PCRADIALMATRIX([n,1],PC);
   bini = b;
   result.raygini=0;
   result.errorini=1;
else  % PHASE D'INITIALISATION

U = double(ureuse);
fU = U'*b;
aU = U'*A*U;
if directsolve
    l = solve(aU,fU);
else
    [l,flag] = cgs(aU,fU,tolpcg,[],'noupdate');
end
result.Raygini = double(full(expect(fU,l)));

result.raygini = trace(result.Raygini);
u = PCRADIALMATRIX(U,[n,1],l);
bini = b - A*u;

switch errorindicator
    case 'rayleigh'
result.errorini=1;  
    case 'reference'
result.errorini=mynorm(u-uref)/mynorm(uref);
    case 'residual'
result.errorini=mynorm(bini)/normb;            

end


if ~strcmp(errorindicator,'rayleigh')
if ~fprintf('  Initialisation : %3d fonctions - erreur  : %3d \n',result.nfonctions,result.errorini)
if result.errorini<getparam(GSD,'tolini')
disp('  Convergence apres initialisation')
return
end
end
end

end

result.nfonctions = length(u);



bu = bini;

nbfoncmax = paramradial.nbfoncmax;

for j=1:nbfoncmax %%%%%%%%%%%%%%%% BOUCLE NOUVELLES FONCTIONS

result.nfonctions = result.nfonctions + 1  ;

%l0 = one(PC);
l0 = ones(length(PC),1);l0=PCMATRIX(l0,[1,1],PC);
alpha0=norm(l0);l0=l0/alpha0;

for i=1:paramradial.pfixmax %%%%%%%%%%%%%%%% BOUCLE POINT FIXE

f0=expect(bu,l0);
L0 = expect(A,l0,l0);
U = L0\f0;
%rayg(i)=U'*f0;
alpha = sqrt(U'*Am*U);
U = U /alpha ;
fU = U'*bu;
aU = U'*A*U;
if directsolve
l = solve(aU,fU);
else
[l,flag] = cgs(aU,fU,tolpcg,[],'noupdate');
end

result.rayg{j}(i) = expect(l,PCMATRIX(fU));
alpha = norm(l);
l=l/alpha;
%errorpf(i)=double(sqrt(...
%  (alpha0^2+alpha^2-2*alpha0*alpha*(U0'*Am*U)*(double(l0)*double(l)'))/...
%                (alpha^2)));
errorpf(i)=abs((result.rayg{j}(i)-(i>1)*result.rayg{j}(i-(i>1)))/result.rayg{j}(i));
            
if affiche 
    fprintf('  iteration %3d -> erreur = %.3e  \r',i,errorpf(i)); 
end;

l0=l;U0=U;alpha0=alpha;

if errorpf(i)<paramradial.pfixtol 
    break 
end

end %%%%%%%%%%%%%%%% END BOUCLE POINT FIXE

u = u + U.*(alpha*l);

if ~update  %%%%%%%%%%%%% NO UPDATE OF STOCHASTIC FUNCTIONS
bu = bu - (A*U)*(alpha*l);
result.rayg{j}=result.rayg{j}(i);
ee=result.raygini;
for jj=1:j
ee=ee+result.rayg{jj};    
end
result.errorraygi(j)=sqrt(abs(result.rayg{j})/ee);

radalpha=[radalpha, sparse(size(radalpha,1),1);...
          sparse(1,size(radalpha,2)),alpha];


else   %%%%%%%%%%%%%% UPDATING STOCHASTIC FUNCTIONS
V = double(getV(u));
fU = V'*b;
aU = V'*A*V;

if directsolve
    l = solve(aU,fU);
else
    [l,flag] = cgs(aU,fU,tolpcg,[],'noupdate');
end

result.Rayg{j} = double(full(expect(fU,l)));
result.rayg{j} = trace(result.Rayg{j});

u = PCRADIALMATRIX(V,[n,1],l);
bu = b - A*u;

if j==1
result.errorrayg(j) = sqrt(abs(result.rayg{j}-result.raygini)/((result.rayg{j})));    
else    
result.errorrayg(j)=sqrt(abs(result.rayg{j}-result.rayg{j-1})/(result.rayg{j}));
end

end %%%%%%%%%%%%% FIN UPDATING

% CALCUL ERREUR
switch errorindicator
    case 'residual'
result.error(j) = mynorm(bu)/normb;
    case 'rayleigh'
if ~update      
result.error(j)= result.errorraygi(j)  ;
else
result.error(j)= result.errorrayg(j)  ;
end
    case 'reference'
result.error(j)=mynorm(u-uref)/mynorm(uref);
end
if ischarin('testerror',varargin)
%result.errorA(j)=mynorm(u-uref,A)/mynorm(uref,A);
result.errorres(j)=mynorm(bu)/normb;
end


if affiche
fprintf('  %d fonctions -> erreur = %.3e \n',result.nfonctions,result.error(j))
if ischarin('testerror',varargin)
fprintf('  %d fonctions -> erreurres = %.3e \n',result.nfonctions,result.errorres(j))
end
end

result.addedfunctions = j;
result.time(j)=etime(clock,clock0);

if result.error(j)<paramradial.tol 
if strcmp(errorindicator,'rayleigh')
u = normsort(u);
u=truncate(u,length(u)-1);
result.nfonctions = length(u);
result.addedfunctions = j-1;  
end
hasconv=true;    
fprintf('  Convergence avec %3d fonctions -> erreur = %.3e \n',result.nfonctions,result.error(j))    
break
end

hasconv=false;

end %%%%%%%%%%%%%%%% END BOUCLE NOUVELLES FONCTIONS

if getparam(GSD,'finalunique')
tolfactSD = getparam(GSD,'finaluniquefacttol');       
u=uniqueV(u,paramradial.tol*tolfactSD);    

elseif getparam(GSD,'finalSD')
 tolfactSD = getparam(GSD,'finalSDfacttol');   
 u = spectral_decomposition(u,'tol',paramradial.tol*tolfactSD,...
     'nbfoncmax',length(u));  
end

  
if getparam(GSD,'finalupdate') %%%% FINAL UPDATING
U = double(getV(u));
fU = U'*b;
aU = U'*A*U;
if directsolve
    l = solve(aU,fU);
else
    [l,flag] = cgs(aU,fU,tolpcg,[],'noupdate');
end

u = PCRADIALMATRIX(U,[n,1],l);
bu = b - A*u;
switch errorindicator
    case 'reference'
result.error(j)=mynorm(u-uref)/mynorm(uref);
    otherwise
result.error(j) = mynorm(bu)/normb;
end

disp('  Reactualisation')
fprintf('  nb fonctions %3d - erreur  : %3d \n',result.nfonctions,result.error(j))
end %%%% END FINAL UPDATING

if ~hasconv
fprintf('  Non-convergence avec %3d fonctions -> erreur = %.3e \n',result.nfonctions,result.error(j))    
end

etime(clock,clock0)


