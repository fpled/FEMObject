%% Pre-processing

valList = [1 10 100:100:400] ; % 300 fails

model = QPModel('order',2,...
    'cellNum',[10 10],...
    'cellSize',[1 1],...
    'elementSize',[.05 .05],...
    'tolSVD',1e-6,...
    'verbose',true) ;
dist = dealMultinomial([0.8 0.2],getCellNb(model)) ;

times = zeros(numel(valList),2) ;
ranks = times ;
errors = times ;
n=1;
for val = valList
% patterns = struct('name',{'uniform','uniform'},...
%     'value',{1 val},...
%     'size',{[] []} ,...
%     'center',{[] []},...
%     'offset',{[] []}) ;
% patternsTable = [1 0 ; 0 1] ;
patterns = struct('name',{'uniform','cross'},...
    'value',{1 val},...
    'size',{[] [.2 .2]} ,...
    'center',{[] [.5 .5]},...
    'offset',{[] []}) ;
patternsTable = [1 1 ; 1 0] ;

KAss = QPConductivityAssembler('model',model,...
    'patterns',patterns,...
    'patternsTable',patternsTable,...
    'distribution',dist) ;
KAss = assemble(KAss) ;

sipAss = QPDiffusionAssembler('conductivityAssembler',KAss,...
    'BC','PBC',...
    'source','corrector1',...
    'constantNullification','full',...
    'useAverageWeights',false,...
    'useStabilisationWeights',false) ;
sipAss = setPenalty(sipAss,calcPenalty(sipAss)) ;
pbSIP = QPDiffusionProblem('operatorAssembler',sipAss,...
    'tolerance',1e-3);

swipAss = QPDiffusionAssembler('conductivityAssembler',KAss,...
    'BC','PBC',...
    'source','corrector1',...
    'constantNullification','full',...
    'useAverageWeights',true,...
    'useStabilisationWeights',true) ;
swipAss = setPenalty(swipAss,.1*calcPenalty(swipAss)) ;
pbSWIP = QPDiffusionProblem('operatorAssembler',swipAss,...
    'tolerance',1e-3);

%% Computations

%[solSIP,outSIP,pbSIP] = solve(pbSIP,1:getOrder(pbSIP)) ;
[solSWIP,outSWIP,pbSWIP] = solve(pbSWIP,1:getOrder(pbSWIP)) ;

% [solFE_,outFE] = solveFEM(pbSIP) ;

%% Post-processing

errorFun = @(ref,rel) norm(full(doubleQP(rel-ref)))/norm(ref) ;
errorSIP = errorFun(solSWIP,solSIP) ;
errorSWIP = errorFun(solSIP,solSWIP) ;
fprintf('SIP: time %s - rank %i - error %.3g\n',...
    formatDuration(outSIP.time),outSIP.iter,errorSIP) ;
fprintf('SWIP: time %s - rank %i - error %.3g\n',...
    formatDuration(outSWIP.time),outSWIP.iter,errorSWIP) ;
times(n,1) = outSIP.time ;
times(n,2) = outSWIP.time ;
ranks(n,1) = outSIP.iter ;
ranks(n,2) = outSWIP.iter ;
errors(n,1) = errorSIP ;
errors(n,2) = errorSWIP ;
n=n+1;
end

figure
subplot(2,1,1)
plot(model,solSIP) ; colorbar
subplot(2,1,2)
plot(model,solSWIP) ; colorbar

% solFE = relativeSort(solFE_,getcoord(getnode(outFE.model)),getDomainCoord(model)) ;
% figure
% plot(model,solFE) ; colorbar