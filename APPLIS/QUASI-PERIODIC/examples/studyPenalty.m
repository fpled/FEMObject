factors =  [5;1]*10.^(1:-1:-4) ;
factors = factors(:) ;

model = QPModel('order',2,...
    'cellNum',[10 10],...
    'cellSize',[1 1],...
    'elementSize',[.1 .1],...
    'tolSVD',1e-6,...
    'verbose',true) ;

patterns = struct('name',{'uniform','rectangle'},...
    'value',{1 99},...
    'size',{[] [.99 .99]} ,...
    'center',{[] []},...
    'offset',{[] []}) ;
patternsTable = [1 1 ; 1 0] ;

KAss = QPConductivityAssembler('model',model,...
    'patterns',patterns,...
    'patternsTable',patternsTable,...
    'probability',[0.8 0.2]) ;
KAss = assemble(KAss);

opAss = QPDiffusionAssembler('conductivityAssembler',KAss,...
    'BC','PBC',...
    'source','corrector1',...
    'constantNullification','full',...
    'useAverageWeights',true,...
    'useStabilisationWeights',true) ;
penalty = calcPenalty(opAss) ;

maxIter = numel(factors) ;
times= zeros(maxIter,1) ;
ranks = zeros(maxIter,1) ;
errors = zeros(maxIter,1) ;
for i = 11:maxIter
    pb = QPDiffusionProblem('operatorAssembler',...
        setPenalty(opAss,penalty*factors(i)),'tolerance',1e-3);
    [~,out] = solve(pb,1:getOrder(pb)) ;
    times(i) = out.time ;
    ranks(i) = out.iter ;
    errors(i) = out.error ;
end
disp([ranks,times,errors])