function [sol,out,pb] = fiberBenchmark(order)

if nargin < 1
    order = 2 ;
end

model = QPModel('order',order,...
    'cellNum',[10 1],...
    'cellSize',[1 5],...
    'elementSize',[.05 .05],...
    'tolSVD',1e-6,...
    'verbose',true) ;

patterns = struct('name',{'uniform','bar'},...
    'value',{2 -1},...
    'size',{[] [.2 1]} ,...
    'center',{[] [.5 .5]},...
    'offset',{[] []}) ;
cellNb = getCellNb(model) ;
faulty = round(cellNb/2) ;
distribution = {setdiff(1:cellNb,faulty) faulty} ;
patternsTable = [1 1 ; 0 1] ;

KAss = QPConductivityAssembler('model',model,...
    'patterns',patterns,...
    'patternsTable',patternsTable,...
    'distribution',distribution,...
    'tolSVD',getTolSVD(model),...
    'verbose',getVerbose(model)) ;
KAss = assemble(KAss) ; % to get conductivity and its bounds

diffAss = QPDiffusionAssembler('model',model,...
    'conductivity',getConductivity(KAss),...
    'conductivityBounds',getConductivityBounds(KAss),...
    'BC','PBC',...
    'source','corrector1',...
    'constantNullification','1point',...
    'tolSVD',getTolSVD(model),...
    'verbose',getVerbose(model)) ;
%diffAss = setPenalty(diffAss,100) ;

pb = QPDiffusionProblem('model',model,...
    'conductivityAssembler',KAss,...
    'operatorAssembler',diffAss,...
    'tolerance',1e-3,...
    'verbose',getVerbose(model));

[sol,out,pb] = solve(pb,1:getOrder(pb)) ;

end