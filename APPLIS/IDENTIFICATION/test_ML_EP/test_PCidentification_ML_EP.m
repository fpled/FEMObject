%% The objective here is to compare the accuracy and efficiency
% of the PC identification between Maximum Likelihood(D) and
% Direct Projection method using Emprical CDF
% see the article Stefanou et Nouy, IJNME 2009

%% Initial FEMOBJECT Environment
clear;
clc;

addpath(genpath('/glouton/struct/lian/eXlibris/FEMOBJECT'));
initfemobjectoptions

cd /glouton/struct/lian/eXlibris/FEMOBJECT/APPLIS/IDENTIFICATION/test_ML_EP;
pwd;

%% Load the samples for identification
% load stiffness_tensor_samples.mat;
% Xs = StiffMatrix;

% test one varibale
% X = RVLOGNORMAL(1,0.3,0,'stat');
% Xs = random(X,1,300);

% test two un vector with two variables
X = RANDVARS(RVNORMAL(0,1),RVNORMAL(0,1));
X = get(PCMODEL(X,'order',1),'X');
Xs = double(full(random(X,1,500)));

%% Compare the Maximum Likelihood value
% for the final expansion, i.e.
% ML(D) ===>  PCMATRIX
% ML(I) ===>  PCRADIALMATRIX
% EP(I) ===>  PCRADIALMATRIX


rssamples = 1e3; % random search times for ML(d), defaut 1e3
Nbs = 1e4; % Nb of samples generated by given
% chaos expansion for PDF, defaut 1e4

order = 1:4;
nb_cell = size(order,2);
Xpc_EP = cell(1,nb_cell);
Xpc_ML = cell(1,nb_cell);
Xpc_ML_I = cell(1,nb_cell);
Likelihood_EP = zeros(1,nb_cell);
Likelihood_ML = zeros(1,nb_cell);
Likelihood_ML_I = zeros(1,nb_cell);
t_EP = zeros(1,nb_cell);
t_ML = zeros(1,nb_cell);
t_ML_I = zeros(1,nb_cell);

for i = 1:size(order,2) % order of polynomial chaos
    tic;
    Xpc_EP{i} = PCidentification_EP(order(i),Xs);
    t_EP(i) = toc;
end

for i = 1:size(order,2) % order of polynomial chaos
    tic;
    Xpc_ML_I{i} = PCidentification_ML_I(order(i),Xs,'nbsestim',Nbs, ...
        'rssamples',rssamples);
    t_ML_I(i) = toc;
end

% ML(D) is computational expensive, local parallele is thus used
eval(sprintf('matlabpool open local %d',nb_cell));
parfor i = 1:size(order,2) % order of polynomial chaos
    tic;
    Xpc_ML{i} = PCidentification_ML(order(i),Xs,'nbsestim',Nbs, ...
        'rssamples',rssamples);
    t_ML(i) = toc;
end
save all;
matlabpool close;

for i = 1:size(order,2) % order of polynomial chaos
    Likelihood_EP(i) = likelihood(Xpc_EP{i}, Xs, Nbs);
    Likelihood_ML_I(i) = likelihood(Xpc_ML_I{i}, Xs, Nbs);
    Likelihood_ML(i) = likelihood(Xpc_ML{i}, Xs, Nbs);
end

save all


%% Likelihood value of the final expansion, reconstructed from KL expansion
figure(1); hold on;
plot(order, Likelihood_ML, 'DisplayName', 'ML(D)', 'Color', [1 0 0]);
plot(order, Likelihood_EP, 'DisplayName', 'EP(I)', 'Color', [0 0 1]);
plot(order, Likelihood_ML_I, 'DisplayName', 'ML(I)', 'Color', [0 1 1]);

%% rough cpu time
figure(2);hold on;
plot(order, t_ML, 'DisplayName', 'ML(D)', 'Color', [1 0 0]);
plot(order, t_EP, 'DisplayName', 'EP(I)', 'Color', [0 0 1]);
plot(order, t_ML_I, 'DisplayName', 'ML(I)', 'Color', [0 1 1]);


%% plot pdf of the first component for order 3
figure(3);hold on;
ithcomp=1;
Xpcs_ML = double(random(Xpc_ML{3},Nbs));
Xpcs_ML_I = double(random(Xpc_ML_I{3},Nbs));
Xpcs_EP = double(random(Xpc_EP{3},Nbs));
pdfsampleplot(Xpcs_ML(ithcomp,:), 'DisplayName', 'ML(D)', 'Color', [1 0 0]);
pdfsampleplot(Xpcs_EP(ithcomp,:), 'DisplayName', 'EP(I)', 'Color', [0 0 1]);
pdfsampleplot(Xpcs_ML_I(ithcomp,:), 'DisplayName', 'ML(I)', 'Color', [0 1 1]);

