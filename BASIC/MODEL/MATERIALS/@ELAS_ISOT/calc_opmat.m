function D = calc_opmat(mat,elem,xnode,xgauss)
% function D = calc_opmat(mat,elem,xnode,xgauss)

if nargin<=2
    xnode = [];
    xgauss = [];
end

if israndom(mat)
    D = calc_opmatpc(mat,elem,xnode,xgauss);
    return
end

switch getdim(elem)
    case 1
        E = evalparam(mat,'E',elem,xnode,xgauss); % Young modulus
        S = evalparam(mat,'S',elem,xnode,xgauss); % cross-section area
        D = E*S; % stiffness operator
    case 2
        E = evalparam(mat,'E',elem,xnode,xgauss); % Young modulus
        nu = evalparam(mat,'NU',elem,xnode,xgauss); % Poisson ratio
        mu = E/(1+nu)/2; % second Lamé coefficient (shear modulus)
        if isaxi(elem)
            lambda = E*nu/(1+nu)/(1-2*nu); % first Lamé coefficient
            % D = E/(1+nu)/(1-2*nu)*...
            %     [(1-nu),nu,nu,0;...
            %     nu,(1-nu),nu,0;...
            %     nu,nu,(1-nu),0;...
            %     0,0,0,(1-2*nu)/2]; % stiffness operator
            D = [lambda+2*mu,lambda,lambda,0;...
                lambda,lambda+2*mu,lambda,0;...
                lambda,lambda,lambda+2*mu,0;...
                0,0,0,mu]; % stiffness operator
        else
            e = evalparam(mat,'DIM3',elem,xnode,xgauss); % thickness
            switch getoption(elem)
                case 'DEFO'
                    % D = e*E/(1+nu)/(1-2*nu)*...
                    %     [(1-nu),nu,0;...
                    %     nu,(1-nu),0;...
                    %     0,0,(1-2*nu)/2]; % stiffness operator
                    lambda = E*nu/(1+nu)/(1-2*nu); % first Lamé coefficient
                otherwise
                    % D = e*E/(1-nu^2)*...
                    %     [1,nu,0;...
                    %     nu,1,0;...
                    %     0,0,(1-nu)/2]; % stiffness operator
                    lambda = E*nu/(1-nu^2); % first Lamé coefficient
            end
            D = e*...
                [lambda+2*mu,lambda,0;...
                lambda,lambda+2*mu,0;...
                0,0,mu]; % stiffness operator
        end
        
    case 3
        E = evalparam(mat,'E',elem,xnode,xgauss); % Young modulus
        nu = evalparam(mat,'NU',elem,xnode,xgauss); % Poisson ratio
        lambda = E*nu/(1+nu)/(1-2*nu); % first Lamé coefficient
        mu = E/(1+nu)/2; % second Lamé coefficient (shear modulus)
        % D = E/(1+nu)/(1-2*nu)*...
        %     [(1-nu),nu,nu,0,0,0;...
        %     nu,(1-nu),nu,0,0,0;...
        %     nu,nu,(1-nu),0,0,0;...
        %     0,0,0,(1-2*nu)/2,0,0;...
        %     0,0,0,0,(1-2*nu)/2,0;...
        %     0,0,0,0,0,(1-2*nu)/2]; % stiffness operator
        D = [lambda+2*mu,lambda,lambda,0,0,0;...
            lambda,lambda+2*mu,lambda,0,0,0;...
            lambda,lambda,lambda+2*mu,0,0,0;...
            0,0,0,mu,0,0;...
            0,0,0,0,mu,0;...
            0,0,0,0,0,mu]; % stiffness operator
        
end


